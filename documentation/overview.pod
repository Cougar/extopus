=head1 Mongregator Architectural Overview

=head2 Concept

Mongregator is an aggregating front end to a wide array of monitoring
systems. Mongregator uses a modular architecture which allows for simple
integration with other system.

RRDtool has become a kind of common storage and presentation system for many
monitoring systems. Mongregator has therefore rich support for rrdtool based
data stores.

Accessing a monitoring system from Mongregator can be as superficial as
directly including a web page into a Mongregator iframe or it can be as deep
as giving mongragator direct access to the rrd files or pulling  in tabular data.

There are three strategies for integrating an existing tool with Mongregator:

=over

=item *

Write a L<tool specific plugin|/"Plugin API"> for Mongragator and use
whatever methods for interaction the tool already supports.

=item *

Add a JSON RPC interface to your monitoring system for
Mongregator to access directly using the Mongregator L<native
plugin|/"Native Mongregator Integration">.

=item *

Teach your Monitoring System to send its information to Mongregator via the
L<Mongregator JSON RPC Interface|/"Mongregator JSON RPC">.

=back

=head2 Data Model

Mongregator views the world as a collection of information nodes. Each node
has a number of properties. The properties are split into three namespaces:
required, optional and informational. A node must provide at least the
required properties. Mongregator will use information from optional
properties to improve the user experience. Informational properties can
contain any extra data you wish to display along with the node properties.

Mongregator can show the nodes it knows as a list or as a tree. The tree
view uses property values to build the tree. For performance reasons
Mongregator creates a persistant node cache which gets updated as new
information becomes available.

=head2 Integration

=head3 Native Mongregator Integration

For native integration, a system has to support a set of JSON-RPC calls.
They are centered around pulling in information about the available nodes
and details about the data associated with a particular node.

=head3 Plugin API

Instead of adding Mongregator support to a particular tool it is also
possible to teach Mongregator how to talk to a tools existing interfaces.
This is done by creating a tool specific plugin for Mongregator.

=head3 Mongregator JSON RPC

Monitoring Applications can push their information to Mongregator via a JSON
RPC Webservice.

=head2 Virtual Nodes

Based on the information Mongregator has imported it can build virtual
nodes, presenting information created by combining information from multiple
sources. Virtual nodes are generated by plugins, accessing the mongreagator
data store.

=head2 Data Export and Printing

Mongregator provides several predefined widgets which can be combined into
screens for information presentation. Depending on the widgets used in a
screen, the content of the widget or the whole screen can be downloaded
as pdf or csv.

Users can configure report screens to be sent to their email account at
regular intervals.

=head2 Access Control

Access Control is based on node filtering. Each user or group of users can
be linked with filtering experssions restricting the nodes they can view.

By using virutal nodes in connection with access control, it is possible to
restrict users to high level views.

=head2 Dashboard

Users can drag and drop widgets from individual node screens into a
dashboard screens, assembling their personal control center.


